I"L<p>I recently found out about semantic Git commit messages—a method for structuring Git commits into logical chunks by using semantic labels. Inspired by <a href="http://karma-runner.github.io/2.0/dev/git-commit-msg.html" target="_blank" rel="noopener">Karma’s style guide</a> for Git commit messages, the following semantic Git commits can greatly improve your Git log readability at a glance. They help to clarify the record of changes to a project and help focus commits into scoped segments.</p>

<p>Semantic Git commits start with a semantic tag and use an imperative voice. Git commit messages should be prefixed with <strong>one</strong> the following tags:</p>

<ul>
  <li><code class="highlighter-rouge">feat:</code> - implement new features for endusers</li>
  <li><code class="highlighter-rouge">fix:</code> - bug fix for endusers (not a build-process fix)</li>
  <li><code class="highlighter-rouge">docs:</code> - update to project documentation</li>
  <li><code class="highlighter-rouge">style:</code> - update code formatting (indentation, tabs vs spaces, etc.)</li>
  <li><code class="highlighter-rouge">refactor:</code> - refactoring of code</li>
  <li><code class="highlighter-rouge">test:</code> - adding or updating tests</li>
  <li><code class="highlighter-rouge">chore:</code> - updates to build process</li>
</ul>

<h2 id="feat">feat</h2>

<p>The <code class="highlighter-rouge">feat:</code> tag should be used to identify new features or changes to production code that endusers will see. An example might be adding a method to sort posts based on popularity. It does not include changes to build process code, such as adding HTML minification in the build process pipeline.</p>

<h4 id="example">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"feat: add ability to view most popular posts"</span>
</code></pre></div></div>

<h2 id="fix">fix</h2>

<p>The <code class="highlighter-rouge">fix:</code> tag should be used to identify any bug fixes to production code. This includes any fix that would effect the enduser, not the build process.</p>

<h4 id="example-1">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"fix: check if file exists before attempting to unlink"</span>
</code></pre></div></div>

<h2 id="docs">docs</h2>

<p>The <code class="highlighter-rouge">docs:</code> tag is fairly straightforward and should be used to identify changes to the project documentation, either internal or client-facing.</p>

<h4 id="example-2">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"docs: add detailed installation instructions for Ubuntu"</span>
</code></pre></div></div>

<h2 id="style">style</h2>

<p>The <code class="highlighter-rouge">style:</code> tag should be used to identify changes made to the <strong>code</strong> style, which do not effect the enduser. Note that this is separate from the styling of user interfaces, which does effect the enduser. For example, a style change may indicate a change from using tab indentation to spaces.</p>

<p>For style updates that would effect the enduser, such as CSS changes, use the <code class="highlighter-rouge">feat:</code> tag instead.</p>

<h4 id="example-3">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"style: convert from 4 space indentation to 2 spaces"</span>
</code></pre></div></div>

<h2 id="refactor">refactor</h2>

<p>The <code class="highlighter-rouge">refactor:</code> tag should be used to identify refactoring in the codebase. This includes changing variable names, combining or simplifying code, etc.</p>

<h4 id="example-4">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"refactor: rename ArticleController to PostController"</span>
</code></pre></div></div>

<h2 id="test">test</h2>

<p>The <code class="highlighter-rouge">test:</code> tag should be used to identify changes surrounding tests.</p>

<h4 id="example-5">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"test: add assertions for Collection update and destroy methods"</span>
</code></pre></div></div>

<h2 id="chore">chore</h2>

<p>The <code class="highlighter-rouge">chore:</code> tag should be used to identify changes to build scripts and other updates that do not alter production code. This might include dependency package updates or build script configuration edits.</p>

<h4 id="example-6">Example</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"chore: update build script to webpack 4"</span>
</code></pre></div></div>
:ET