I"çA<p>Using Scalable Vector Graphics (SVG) images for vector-based assets can help to significantly shed page weight. SVG images can be sized up and down without sacrificing image quality. Individual elements, such as fill and stroke properties, can even be programmatically controlled and animated.</p>

<p>SVG images can be referenced in <code class="highlighter-rouge">&lt;img&gt;</code> tags just like an other image format, but inlining SVG elements is the most robust approach because it allows the SVG properties to be dynamically edited and does not require an additional http request. However, for complex images inlining SVG code can be a messy tangle to work with and repeating this code for several images is not very DRY. Using inline SVGs in multiple places might require copy and pasting lengthy chunks of code, which can quickly become difficult to manage and might pollute an otherwise tidy code base.</p>

<p>A solution for this is to use Vue components to wrap the SVG inline code. This allows you to separate the inline SVG code from the rest of your application templates and have multiple instances of the same SVG image each with its own dynamic properties.</p>

<h2 id="creating-the-svg-component">Creating the SVG Component</h2>

<p>In this example, weâ€™ll develop a reusable SVG component using the HackWild SVG logo developed for this site, though any properly formatted SVG will work. Weâ€™ll start by creating a Vue single-file component, <code class="highlighter-rouge">Logo.vue</code> and scaffold it with the basic structure:</p>

<h4 id="logovue">Logo.vue</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">baseProfile=</span><span class="s">"tiny"</span>
    <span class="na">version=</span><span class="s">"1.2"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 422.1 329.5"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">stroke-width=</span><span class="s">"5"</span>
      <span class="na">stroke-miterlimit=</span><span class="s">"10"</span>
      <span class="na">d=</span><span class="s">"M108.2 262.6L220 39c-44.1 0-84.5 24.9-104.2 64.4L4 327c44.2 0 84.5-24.9 104.2-64.4zM306.2 226.1L418 2.5c-44.1 0-84.5 24.9-104.2 64.4L202 290.5c44.2 0 84.5-24.9 104.2-64.4z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Logo</span><span class="dl">'</span><span class="p">,</span>
<span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">style</span> <span class="na">lang=</span><span class="s">"css"</span> <span class="na">scoped</span><span class="nt">&gt;&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>Itâ€™s a good idea to name this component in a way that makes sense for your application. Check out the <a href="https://vuejs.org/v2/style-guide/">official Vue style guide</a> for best practices.</p>
</blockquote>

<h3 id="register-and-mount">Register and Mount</h3>

<p>Now that we have our SVG component, weâ€™ll register it in our primary <code class="highlighter-rouge">App</code> component. We can then mount it anywhere in our application where weâ€™ve registered it using <code class="highlighter-rouge">&lt;Logo/&gt;</code>.</p>

<h4 id="appvue">App.vue</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;Logo</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">import</span> <span class="nx">Logo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Logo</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">App</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">Logo</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="controlling-styles-with-props">Controlling Styles with Props</h2>

<p>At this point, our SVG component displays default fill and stroke colors (black) and will expand or contract in size to fill its parent container. To gain control over these properties, letâ€™s create some basic props in our component.</p>

<h3 id="svg-size">SVG Size</h3>

<p>To control the overall size, weâ€™ll set the <code class="highlighter-rouge">:width</code> attribute on the <code class="highlighter-rouge">&lt;svg&gt;</code> to equal a prop, <code class="highlighter-rouge">width</code>. In this case, weâ€™re setting the <code class="highlighter-rouge">:height</code> attribute to also equal the <code class="highlighter-rouge">width</code> prop because we always want to maintain a square aspect ratio for the logo. Weâ€™ll also bind the <code class="highlighter-rouge">:stroke-width</code> attribute on the <code class="highlighter-rouge">&lt;path&gt;</code> element to equal the <code class="highlighter-rouge">strokeWidth</code> prop.</p>

<blockquote>
  <p>Itâ€™s important to note that Vue will transform camel-cased values set in <code class="highlighter-rouge">&lt;script&gt;</code> tags to kebab-cased values in the <code class="highlighter-rouge">&lt;template&gt;</code> in order to follow the HTML attribute convention. For example, the prop <code class="highlighter-rouge">strokeWidth</code> will correlate with <code class="highlighter-rouge">:stroke-width</code> attribute.</p>
</blockquote>

<p>Weâ€™ll set the <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">strokeWidth</code> props to be of the type <code class="highlighter-rouge">Number</code> (the numeric values passed into the attributes for <code class="highlighter-rouge">&lt;svg&gt;</code> elements will default to pixels). Weâ€™ll provide a default <code class="highlighter-rouge">width</code> value of <code class="highlighter-rouge">50</code>, a default <code class="highlighter-rouge">strokeWidth</code> value of <code class="highlighter-rouge">5</code> and explicitly state that these props are not required.</p>

<h3 id="svg-fill-and-stroke-colors">SVG Fill and Stroke Colors</h3>

<p>To control the fill and stroke colors of our SVG component, weâ€™ll define several classes in our <code class="highlighter-rouge">&lt;style&gt;</code> section: <code class="highlighter-rouge">.white</code>, <code class="highlighter-rouge">.green</code> and <code class="highlighter-rouge">.green--outline</code>. We can then bind the <code class="highlighter-rouge">:class</code> attribute on the <code class="highlighter-rouge">&lt;path&gt;</code> element to the <code class="highlighter-rouge">color</code> prop. The <code class="highlighter-rouge">color</code> prop will be of a type <code class="highlighter-rouge">String</code>, have a default value of <code class="highlighter-rouge">white</code> and wonâ€™t be required.</p>

<h4 id="logovue-1">Logo.vue</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;svg</span>
    <span class="na">xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span>
    <span class="na">baseProfile=</span><span class="s">"tiny"</span>
    <span class="na">version=</span><span class="s">"1.2"</span>
    <span class="na">viewBox=</span><span class="s">"0 0 422.1 329.5"</span>
    <span class="na">:width=</span><span class="s">"width"</span>
    <span class="na">:height=</span><span class="s">"width"</span>
  <span class="nt">&gt;</span>
    <span class="nt">&lt;path</span>
      <span class="na">:class=</span><span class="s">"color"</span>
      <span class="na">:stroke-width=</span><span class="s">"strokeWidth"</span>
      <span class="na">stroke-miterlimit=</span><span class="s">"10"</span>
      <span class="na">d=</span><span class="s">"M108.2 262.6L220 39c-44.1 0-84.5 24.9-104.2 64.4L4 327c44.2 0 84.5-24.9 104.2-64.4zM306.2 226.1L418 2.5c-44.1 0-84.5 24.9-104.2 64.4L202 290.5c44.2 0 84.5-24.9 104.2-64.4z"</span>
    <span class="nt">/&gt;</span>
  <span class="nt">&lt;/svg&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Logo</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">props</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">color</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">default</span><span class="p">:</span> <span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span> <span class="c1">// green, green--outline, white</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">strokeWidth</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
      <span class="na">default</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">width</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
      <span class="na">default</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span>
      <span class="na">required</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">},</span>
<span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">style</span> <span class="na">lang=</span><span class="s">"css"</span> <span class="na">scoped</span><span class="nt">&gt;</span>
<span class="nc">.green</span> <span class="p">{</span>
  <span class="py">fill</span><span class="p">:</span> <span class="m">#61ffab</span><span class="p">;</span>
  <span class="py">stroke</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.green--outline</span> <span class="p">{</span>
  <span class="py">fill</span><span class="p">:</span> <span class="m">#354258</span><span class="p">;</span>
  <span class="py">stroke</span><span class="p">:</span> <span class="m">#61ffab</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.white</span> <span class="p">{</span>
  <span class="py">fill</span><span class="p">:</span> <span class="no">mintcream</span><span class="p">;</span>
  <span class="py">stroke</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">style</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h3 id="passing-props">Passing Props</h3>

<p>Now that weâ€™ve readied our component to accept various properties, we can pass those properties in to our mounted components. For the <code class="highlighter-rouge">color</code> attribute weâ€™ll pass in <code class="highlighter-rouge">green--outline</code>, which correlates to the <code class="highlighter-rouge">.green--outline</code> class that we defined in our component. For the <code class="highlighter-rouge">:width</code> and <code class="highlighter-rouge">:strokeWidth</code> attributes weâ€™ll pass in <code class="highlighter-rouge">150</code> and <code class="highlighter-rouge">10</code> respectively to set the <code class="highlighter-rouge">&lt;svg&gt;</code> width and <code class="highlighter-rouge">&lt;path&gt;</code> stroke width.</p>

<blockquote>
  <p>Itâ€™s important to note that because we need to pass in the <code class="highlighter-rouge">width</code> and <code class="highlighter-rouge">strokeWidth</code> props as a <code class="highlighter-rouge">Number</code> type, we must use the attribute-binding syntax of <code class="highlighter-rouge">:width</code> as oppose to <code class="highlighter-rouge">width</code>. For example, <code class="highlighter-rouge">width=50</code> will pass in a <code class="highlighter-rouge">String</code> to our component and return an error, whereas <code class="highlighter-rouge">:width=50</code> will pass in an actual <code class="highlighter-rouge">Number</code> type.</p>
</blockquote>

<h4 id="appvue-1">App.vue</h4>

<div class="language-vue highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;</span><span class="k">template</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!-- Logo instance 1 --&gt;</span>
    <span class="nt">&lt;Logo</span> <span class="na">color=</span><span class="s">"green--outline"</span> <span class="na">:width=</span><span class="s">"150"</span> <span class="na">:strokeWidth=</span><span class="s">"10"</span> <span class="nt">/&gt;</span>
    <span class="c">&lt;!-- Logo instance 2 --&gt;</span>
    <span class="nt">&lt;Logo</span> <span class="na">color=</span><span class="s">"green"</span> <span class="na">:width=</span><span class="s">"50"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/</span><span class="k">template</span><span class="nt">&gt;</span>

<span class="nt">&lt;</span><span class="k">script</span><span class="nt">&gt;</span>
<span class="k">import</span> <span class="nx">Logo</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./components/Logo</span><span class="dl">'</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">App</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">components</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">Logo</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">}</span>
<span class="nt">&lt;/</span><span class="k">script</span><span class="nt">&gt;</span>
</code></pre></div></div>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>Now that weâ€™ve defined our SVG component as a Vue component with extendible and default values, we can declare another instance of our <code class="highlighter-rouge">&lt;Logo/&gt;</code> component with different options. Weâ€™ve also separated the logic of our SVG element into its own component. This is a great pattern when you need to use different instances of an SVG image throughout an application.</p>

<h3 id="interactive-demo">Interactive Demo</h3>

<p>You can edit and view the source for this project at <a href="https://codesandbox.io/s/p795vp4x7x" target="_blank" rel="noopener">CodeSandbox</a>.</p>
:ET