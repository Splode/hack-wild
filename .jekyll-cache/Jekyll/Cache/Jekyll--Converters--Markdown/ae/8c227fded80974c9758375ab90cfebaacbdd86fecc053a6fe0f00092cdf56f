I"š‰<p>Having a working knowledge of the command-line interface (CLI) can be incredibly valuable. The CLI is the historical bedrock of programming and still proves to be an essential part of the modern development ecosystem. This is due in no small part to the fact that command-line apps tend to be efficient, fast, and powerful.</p>

<p>In this article weâ€™ll flesh out the basics of creating a command-line note taking application. Weâ€™ll cover writing commands, working with user input, performing basic I/O for storage, and registering our application globally.</p>

<h2 id="getting-started">Getting Started</h2>

<h3 id="project-setup">Project Setup</h3>

<p>Weâ€™ll start by initializing a project in a new directory with npm:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>notes-cli <span class="o">&amp;&amp;</span> <span class="nb">cd </span>notes-cli <span class="o">&amp;&amp;</span> npm init
</code></pre></div></div>

<p>For this project weâ€™re going to be using <a href="https://github.com/tj/commander.js/" target="_blank" rel="noopener">Commander.js</a>. Commander offers many convenient tools for creating CLI applications, including option parsing and Git-style subcommands. Weâ€™ll install it as a dependency to our application:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-S</span> commander
</code></pre></div></div>

<p>Next, weâ€™ll make two directories, <code class="highlighter-rouge">bin</code> and <code class="highlighter-rouge">lib</code>, to house our application logic. Itâ€™s customary for the applications executable files, or <em>binaries</em>, to be held in the <code class="highlighter-rouge">bin</code> directory and the <em>libraries</em> essential to the application execution in the <code class="highlighter-rouge">lib</code> directory. Weâ€™ll also create an entry point, <code class="highlighter-rouge">index.js</code>, for our application in the <code class="highlighter-rouge">bin</code> directory.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>bin lib <span class="o">&amp;&amp;</span> <span class="nb">touch </span>bin/index.js
</code></pre></div></div>

<p>Letâ€™s start by just outputting the version number of our application. Instead of having to manually keep track of the application version in multiple places, weâ€™ll use the version field already defined in our <code class="highlighter-rouge">package.json</code> file (which allows us to take advantage of npmâ€™s semantic versioning tools):</p>

<h4 id="indexjs">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">pckg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../package.json</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pckg</span><span class="p">.</span><span class="nx">version</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>Note that it might make sense to use <code class="highlighter-rouge">package</code> as the variable name for importing <code class="highlighter-rouge">package.json</code>, but <code class="highlighter-rouge">package</code> is a reserved word so itâ€™s best to use another name, like <code class="highlighter-rouge">pckg</code>.</p>
</blockquote>

<p>Now, when we run this file with <code class="highlighter-rouge">node</code> we should expect to see the version, <code class="highlighter-rouge">0.0.1</code>, output to the console.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>node /bin/index.js
</code></pre></div></div>

<h3 id="globally-registering-our-application">Globally Registering our Application</h3>

<p>Having to prepend every command with <code class="highlighter-rouge">node</code> and a path is clunky and laborious. We want our command to be accessible globally, not just in this particular project directory, so that we can call it just by typing <code class="highlighter-rouge">notes</code> in the command prompt.</p>

<p>To register this command globally, we first need to give Node a hint about the intended rutime environment for our application. Weâ€™ll do this by setting the following special comment at the beginning of our application entry point:</p>

<h4 id="indexjs-1">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span></code></pre></div></div>

<p>Weâ€™re going to be using npm to create a symbolic link to our application entry point. To do this, weâ€™ll start by registering a <code class="highlighter-rouge">bin</code> object in our <code class="highlighter-rouge">package.json</code> file. Weâ€™ll set the <strong>key</strong> name to the command weâ€™d like to call the application with, and set the <strong>value</strong> to the relative path of the application entry point:</p>

<h4 id="packagejson">package.json</h4>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"bin"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"notes"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./bin/index.js"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>Note that we need to choose a command that isnâ€™t already used by your system.</p>
</blockquote>

<p>Next, weâ€™ll use the npm <code class="highlighter-rouge">link</code> command while in our project root to create a global link to our application entry point:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">link</span>
</code></pre></div></div>

<p>We can now run our application using the command we specified in our <code class="highlighter-rouge">package.json</code> anywhere. To test this, letâ€™s run it in the current project directory and outside the current directory:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>notes
0.0.1
</code></pre></div></div>

<p>In both instances, the command should return the same version number.</p>

<h2 id="creating-commands">Creating Commands</h2>

<h3 id="commander-basics">Commander Basics</h3>

<p>Commander makes it quite easy to create CLI applications. It includes several useful methods, including automatically generated <code class="highlighter-rouge">help</code> and <code class="highlighter-rouge">version</code> flags. We can start using Commander in our application by simply requiring it and calling the <code class="highlighter-rouge">parse()</code> method at the end of our script and passing in the process arguments.</p>

<h4 id="indexjs-2">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">const</span> <span class="nx">pckg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../package.json</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">commander</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="nx">pckg</span><span class="p">.</span><span class="nx">version</span><span class="p">)</span>
<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">)</span>
</code></pre></div></div>

<p>If we run the application again but add the <code class="highlighter-rouge">--version</code> flag set, weâ€™ll achieve the same effect as we did when we used <code class="highlighter-rouge">console.log</code> in the previous example:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>notes <span class="nt">--version</span>
0.0.1
</code></pre></div></div>

<h3 id="basic-structure">Basic Structure</h3>

<p>There are three primary ways to build commands with Commander:</p>

<ol>
  <li>Use primary command with options</li>
  <li>Use secondary commands with options</li>
  <li>Use git-style sub-commands with options</li>
</ol>

<p>Weâ€™ll use the second approach, using secondary commands with options. This approach allows us to define several different commands, each with the potential to have its own options and help output.</p>

<p>Weâ€™ll start by laying out the structure of a basic command, which chains several methods together on the Commander instance (in this case, <code class="highlighter-rouge">program</code>). The basic structure for this approach uses the following methods:</p>

<ul>
  <li>The <code class="highlighter-rouge">command()</code> method is used to define the phrase used to call the command.</li>
  <li>The <code class="highlighter-rouge">alias()</code> method is used to set an optional alias to the command.</li>
  <li>The <code class="highlighter-rouge">description()</code> method defines a description for the command to be displayed in the help output.</li>
  <li>The <code class="highlighter-rouge">action()</code> method is where we will pass in command arguments to functions that weâ€™d ultimately like to call for each command.</li>
</ul>

<h4 id="indexjs-3">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">const</span> <span class="nx">pckg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../package.json</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">commander</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="nx">pckg</span><span class="p">.</span><span class="nx">version</span><span class="p">)</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">command</span><span class="p">().</span><span class="nx">alias</span><span class="p">().</span><span class="nx">description</span><span class="p">().</span><span class="nx">action</span><span class="p">()</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="using-commander-methods">Using Commander Methods</h3>

<p>Once we have our command structure in place, weâ€™ll start populating each method with the appropriate arguments, starting with the <code class="highlighter-rouge">command()</code> method.</p>

<p>The <code class="highlighter-rouge">command()</code> method takes a <code class="highlighter-rouge">String</code> argument with the following syntax: <code class="highlighter-rouge">'command &lt;required&gt; [optional]'</code>, where <code class="highlighter-rouge">command</code> is the sub-command name followed by arguments. The <code class="highlighter-rouge">&lt;&gt;</code> brackets indicate a required argument, while the <code class="highlighter-rouge">[]</code> brackets indicated an optional requirement.</p>

<p>Weâ€™re going to set the command to <code class="highlighter-rouge">add</code> and set the <code class="highlighter-rouge">note</code> argument as required. Weâ€™ll also set a command alias, <code class="highlighter-rouge">a</code>. This allows us to call the <code class="highlighter-rouge">add</code> command with either <code class="highlighter-rouge">add</code> or <code class="highlighter-rouge">a</code>.</p>

<p>Next, we provide a description of the command to be displayed when a user accesses the help output using the <code class="highlighter-rouge">--help</code> flag.</p>

<p>Lastly, weâ€™ll specify the functions to be called when this command is run. The <code class="highlighter-rouge">action()</code> method accepts a callback that has the command arguments passed in. Weâ€™ll pass in the <code class="highlighter-rouge">note</code> argument and simply log it for now.</p>

<h4 id="indexjs-4">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">const</span> <span class="nx">pckg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../package.json</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">commander</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="nx">pckg</span><span class="p">.</span><span class="nx">version</span><span class="p">)</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="dl">'</span><span class="s1">add &lt;note&gt;</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">alias</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="dl">'</span><span class="s1">Add a new note.</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">((</span><span class="nx">note</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
  <span class="p">})</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>The application will error-out if the <code class="highlighter-rouge">add</code> command is run without providing the required <code class="highlighter-rouge">note</code> argument.</p>
</blockquote>

<p>Hereâ€™s an example of how we would call the command that we just wrote:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>note add <span class="s2">"This is a new note."</span>
</code></pre></div></div>

<p>To add more commands to our application, we would simply add another block of methods before the closing <code class="highlighter-rouge">parse()</code> method.</p>

<h2 id="creating-and-using-actions">Creating and Using Actions</h2>

<h3 id="setting-up-the-add-module">Setting Up the Add Module</h3>

<p>With our command created, itâ€™s time to write the logic that handles the <code class="highlighter-rouge">add</code> event. Weâ€™ll start by creating a file, <code class="highlighter-rouge">add.js</code>, in the <code class="highlighter-rouge">lib</code> directory. The <code class="highlighter-rouge">add</code> script will be responsible for receiving an input (the note given by the <code class="highlighter-rouge">add</code> command), adding it to a notebook collection, and finally writing the collection to a local file for persistent storage.</p>

<p>Letâ€™s stub out the module with the functions that we know weâ€™ll need. We know that weâ€™ll need three basic functions: two utility functions for reading and writing to the filesystem, and a function that handles taking a note input from the user and adding it to a collection.</p>

<p>The <code class="highlighter-rouge">add</code> action will require us to write note data to a file, so weâ€™ll need access to the Node <code class="highlighter-rouge">fs</code> (filesystem) module. Weâ€™ll also use the Node <code class="highlighter-rouge">path</code> module to help resolve filesystem paths and the Node <code class="highlighter-rouge">os</code> module to gain access to platform variables, like the default user directory.</p>

<p>Our <code class="highlighter-rouge">write()</code> function will take in a <strong>filepath</strong> (the location and name of the file to save) and the <strong>data</strong> (note) to save.</p>

<p>We donâ€™t want to overwrite our notes everytime we add a new note, so we also need a way to check for existing data. For this, weâ€™ll create a <code class="highlighter-rouge">read()</code> function that accepts a <strong>filepath</strong> as the only argument.</p>

<h4 id="addjs">add.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">read</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>
<span class="kd">const</span> <span class="nx">write</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span> <span class="p">{}</span>
</code></pre></div></div>

<h3 id="building-the-read-and-write-functions">Building the Read and Write functions</h3>

<p>First, weâ€™ll create a variable, <code class="highlighter-rouge">notesPath</code> which defines both the path and filename of the file that will store our notes. We want to store this as a <code class="highlighter-rouge">JSON</code> file in the userâ€™s home directory, so weâ€™ll use <code class="highlighter-rouge">path.resolve()</code> and <code class="highlighter-rouge">os.homedir()</code> to build this path. This will ensure a consistent path structure and experience across platforms.</p>

<p>The <code class="highlighter-rouge">read()</code> function will perform a basic synchronous read and will return parsed data (weâ€™re assuming that weâ€™re only going to be storing data as <code class="highlighter-rouge">JSON</code>).</p>

<p>The <code class="highlighter-rouge">write()</code> function follows a similar structure, except that now we <code class="highlighter-rouge">stringify()</code> the data before writing it to the filesystem.</p>

<blockquote>
  <p>Note that weâ€™ll need to call <code class="highlighter-rouge">process.exit(1)</code> on an error to ensure that our program quits with an error code; we donâ€™t want our program to hang in the event of an error.</p>
</blockquote>

<h4 id="addjs-1">add.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">os</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">os</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">notesPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">homedir</span><span class="p">(),</span> <span class="dl">'</span><span class="s1">notes.json</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">read</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filePath</span><span class="p">))</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">write</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span> <span class="p">{}</span>
</code></pre></div></div>

<h3 id="creating-the-add-function">Creating the Add Function</h3>

<p>Weâ€™ll start by declaring a variable, <code class="highlighter-rouge">collection</code>. Before we attempt to write a new note, we need to check to see if a collection of notes already exists. If a collection of notes <strong>does</strong> exist, weâ€™ll set <code class="highlighter-rouge">collection</code> to the existing notes collection and <code class="highlighter-rouge">push</code> the new note into the existing array.</p>

<p>If the collection does not already exist, weâ€™ll set <code class="highlighter-rouge">collection</code> to an array with the supplied note as its only element.</p>

<p>After performing either of these actions, weâ€™ll write our collection to the <code class="highlighter-rouge">notesPath</code> and log some feedback to the console.</p>

<h4 id="addjs-2">add.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">os</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">os</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">path</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">notesPath</span> <span class="o">=</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">homedir</span><span class="p">(),</span> <span class="dl">'</span><span class="s1">notes.json</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">read</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="nx">filePath</span><span class="p">))</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">write</span> <span class="o">=</span> <span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFileSync</span><span class="p">(</span><span class="nx">filePath</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">),</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">note</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">collection</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">notesPath</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">collection</span> <span class="o">=</span> <span class="nx">read</span><span class="p">(</span><span class="nx">notesPath</span><span class="p">)</span>
    <span class="nx">collection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">collection</span> <span class="o">=</span> <span class="p">[</span><span class="nx">note</span><span class="p">]</span>
  <span class="p">}</span>

  <span class="nx">write</span><span class="p">(</span><span class="nx">notesPath</span><span class="p">,</span> <span class="nx">collection</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">()</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`âœ” Added "</span><span class="p">${</span><span class="nx">note</span><span class="p">}</span><span class="s2">" to the notes collection.`</span><span class="p">)</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="wiring-it-all-together-in-commander">Wiring it all Together in Commander</h3>

<p>Back in our app entry point, <code class="highlighter-rouge">index.js</code>, weâ€™ll import the <code class="highlighter-rouge">add</code> function that we just created and call it as part of the <code class="highlighter-rouge">add</code> action, passing in the provided note as an argument.</p>

<h4 id="indexjs-5">index.js</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span>
<span class="kd">const</span> <span class="nx">pckg</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../package.json</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">program</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">commander</span><span class="dl">'</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./../lib/add</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">version</span><span class="p">(</span><span class="nx">pckg</span><span class="p">.</span><span class="nx">version</span><span class="p">)</span>

<span class="nx">program</span>
  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="dl">'</span><span class="s1">add &lt;note&gt;</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">alias</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">description</span><span class="p">(</span><span class="dl">'</span><span class="s1">Add a new note.</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">action</span><span class="p">((</span><span class="nx">note</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">add</span><span class="p">(</span><span class="nx">note</span><span class="p">)</span>
  <span class="p">})</span>

<span class="nx">program</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">)</span>
</code></pre></div></div>

<p>We can now run <code class="highlighter-rouge">note add "hello world"</code> and expect the following result:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">âœ” Added "hello world" to the notes collection.
</span></code></pre></div></div>

<blockquote>
  <p>Tip: you can provide additional formatting to your console output to help convey important information. Check out the widely-used <a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk</a> library for color-formatting.</p>
</blockquote>

<p>Running this command again will append an additional entry to our newly-created notes collection. You can verify that the notes have actually been saved by viewing the notes collection, <code class="highlighter-rouge">notes.json</code>, in the home directory.</p>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>We now have a basic structure for a command-line application. A lot can be accomplished with the basic tools that weâ€™ve covered in this article. In fact, it only scratches the surface of whatâ€™s possible.</p>

<p>This article was partly informed by a process I recently went through when creating a command-line note taking application called <a href="https://github.com/Splode/jin" target="_blank" rel="noopener"><em>jin</em></a>. If you want to dive deeper into a command-line project, or would like to have a nifty tool for taking notes in the terminal, check out the <a href="https://github.com/Splode/jin" target="_blank" rel="noopener">source for jin on Github</a>.</p>
:ET