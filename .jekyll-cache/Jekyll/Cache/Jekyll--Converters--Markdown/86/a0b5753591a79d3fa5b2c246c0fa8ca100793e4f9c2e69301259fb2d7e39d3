I"I=<p>Itâ€™s a common practice today for users to contribute content by uploading images. A typical scenario is a user-submitted image for a profile photo selected using the <code class="highlighter-rouge">&lt;input&gt;</code> form element. Users have come to expect that when they select an image for uploading, theyâ€™ll be able to preview the image before submitting it.</p>

<p>By default, when a user selects an image using the file <code class="highlighter-rouge">&lt;input&gt;</code> element, its reference is temporarily stored as a path; it needs to be read and processed before it can be shown onscreen.</p>

<p>We want users to be able to preview the image that theyâ€™ve selected before itâ€™s sent to a database or API endpoint. To accomplish this, weâ€™ll make use of the <code class="highlighter-rouge">FileReader</code> object, which is part of the <a href="https://www.w3.org/TR/FileAPI/" target="_blank" rel="noopener">File API</a>.</p>

<h2 id="basic-setup">Basic Setup</h2>

<h3 id="input-and-image-elements">Input and Image Elements</h3>

<p>Our basic structure will be an image container with an empty <code class="highlighter-rouge">&lt;img&gt;</code> element and an <code class="highlighter-rouge">&lt;input&gt;</code> element with a type of <code class="highlighter-rouge">file</code>. To limit the file uploads to common image MIME types, we can use the <code class="highlighter-rouge">accept</code> attribute on the <code class="highlighter-rouge">&lt;input&gt;</code> element and pass in a list of acceptable file extensions. Lastly, weâ€™ll attach data attributes for JavaScript DOM targeting and a class for our image container.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"Preview-img"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;img</span> <span class="na">data-id=</span><span class="s">"filePreview"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">accept=</span><span class="s">".jpg, .jpeg, .png, .gif"</span> <span class="na">data-id=</span><span class="s">"fileInput"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="providing-a-few-basic-display-constraints-with-css">Providing a few Basic Display Constraints with CSS</h3>

<p>To ensure that our images fit within the confines of our layout, weâ€™ll use the <code class="highlighter-rouge">object-fit</code> property and set it to <code class="highlighter-rouge">cover</code>. This will crop all images to fit within its parent container, regardless of size or aspect ratio.</p>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.Preview-img</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">gainsboro</span><span class="p">;</span>
  <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">300px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
  <span class="k">&amp;</span> <span class="nt">img</span> <span class="p">{</span>
    <span class="nl">object-fit</span><span class="p">:</span> <span class="n">cover</span><span class="p">;</span>
    <span class="nl">object-position</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
    <span class="nl">height</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="accessing-the-elements-in-javascript">Accessing the Elements in JavaScript</h3>

<p>To handle when a user selects an image for upload, weâ€™ll attach an event listener to the <code class="highlighter-rouge">&lt;input&gt;</code> element with the <code class="highlighter-rouge">'change'</code> event. When a user selects a file, a reference to that file will be added to the <code class="highlighter-rouge">files</code> array on the <code class="highlighter-rouge">input</code> object. Each file element in this array holds information on the file, including filesize, MIME type, date modified, etc.</p>

<p>For now, weâ€™ll log the files attached to the input element.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">filePreview</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">img[data-id=filePreview]</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">fileInput</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[data-id=fileInput]</span><span class="dl">'</span><span class="p">)</span>

<span class="nx">fileInput</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">change</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleFileUpload</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">handleFileUpload</span><span class="p">(</span><span class="nx">inputEvent</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">inputEvent</span><span class="p">.</span><span class="nx">target</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">files</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="using-the-filereader-object">Using the FileReader Object</h2>

<p>If we take a look at the log output after choosing an image file at this point, weâ€™ll see that <code class="highlighter-rouge">this.files</code> contains a <code class="highlighter-rouge">FileList</code> object with an array of <code class="highlighter-rouge">File</code> <code class="highlighter-rouge">Blob</code> objects (in this case, weâ€™ll only have one <code class="highlighter-rouge">File</code>). To read the data that the <code class="highlighter-rouge">File</code> represents and serve a preview of it, weâ€™ll need to use the <code class="highlighter-rouge">FileReader</code> object.</p>

<h3 id="loading-the-image-preview">Loading the Image Preview</h3>

<p>The <code class="highlighter-rouge">FileReader</code> constructor returns a new <code class="highlighter-rouge">FileReader</code> object, which has several useful methods and events for handling file data. First, weâ€™ll use the <code class="highlighter-rouge">readAsDataURL()</code> method to read the content of the <code class="highlighter-rouge">File</code> object. The <code class="highlighter-rouge">readAsDataURL()</code> method will take in our <code class="highlighter-rouge">File</code> object as a <code class="highlighter-rouge">Blob</code> and return a result as a <code class="highlighter-rouge">DataURL</code>. Next, weâ€™ll hook into the <code class="highlighter-rouge">onload</code> event, which is fired when a read operation is successfully completed. When <code class="highlighter-rouge">onload</code> is fired, weâ€™ll set the <code class="highlighter-rouge">src</code> attribute of our <code class="highlighter-rouge">&lt;img&gt;</code> element to the FileReader result, which is the image <code class="highlighter-rouge">DataURL</code>.</p>

<p>Voila! Now we can preview our image as soon as we select it. ðŸ™Œ</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleFileUpload</span><span class="p">(</span><span class="nx">inputEvent</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">inputEvent</span><span class="p">.</span><span class="nx">target</span>
  <span class="kd">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">()</span>

  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">(</span><span class="nx">readerEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">filePreview</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">readerEvent</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Note that weâ€™re dealing with two different events here: the first event is the <code class="highlighter-rouge">&lt;input&gt;</code> â€˜changeâ€™ event, while the second is the <code class="highlighter-rouge">FileReader</code> â€˜loadâ€™ event.</p>
</blockquote>

<h3 id="image-type-validation">Image Type Validation</h3>

<p>Setting the <code class="highlighter-rouge">accept</code> attribute on the file <code class="highlighter-rouge">&lt;input&gt;</code> element will limit the types of files that users can choose, but there are ways to circumvent this restriction. If the uploaded files are going to be sent to a database, we want to ensure that we are sending the right file type. To provide a second level of validation we can perform a MIME type check at the time the file is handled.</p>

<p>The <code class="highlighter-rouge">File</code> object attached to the <code class="highlighter-rouge">&lt;input&gt;</code> element has a <code class="highlighter-rouge">type</code> property with a <code class="highlighter-rouge">String</code> value corresponding to the fileâ€™s MIME type. When we handle the file, we can check this property against a list of valid MIME types and only continue processing the file if it is in an accepted format. To do this, weâ€™ll define an array of MIME type strings and check if the <code class="highlighter-rouge">type</code> value matches an array element.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">filePreview</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">img[data-id=filePreview]</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">fileInput</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">'</span><span class="s1">input[data-id=fileInput]</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">validImgFormats</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">image/jpeg</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">image/png</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">image/gif</span><span class="dl">'</span><span class="p">]</span>

<span class="nx">fileInput</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">change</span><span class="dl">'</span><span class="p">,</span> <span class="nx">handleFileUpload</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">handleFileUpload</span><span class="p">(</span><span class="nx">inputEvent</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nx">inputEvent</span><span class="p">.</span><span class="nx">target</span>
  <span class="kd">const</span> <span class="nx">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FileReader</span><span class="p">()</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">validImgFormats</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">type</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">alert</span><span class="p">(</span>
      <span class="dl">'</span><span class="s1">Please provide a valid image file. Accepted formats include .png, .jpg, and .gif.</span><span class="dl">'</span>
    <span class="p">)</span>
  <span class="p">}</span>

  <span class="nx">reader</span><span class="p">.</span><span class="nx">readAsDataURL</span><span class="p">(</span><span class="nx">input</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
  <span class="nx">reader</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">(</span><span class="nx">readerEvent</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">filePreview</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">readerEvent</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">result</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="wrapping-up">Wrapping Up</h2>

<p>We can now show a live preview of images that are selected with file <code class="highlighter-rouge">&lt;input&gt;</code> form elements. What if we wanted to allow multiple simoultaneous image uploads along with a preview for each image? Thatâ€™s a simple as adding the <code class="highlighter-rouge">multiple</code> attribute to the <code class="highlighter-rouge">&lt;input&gt;</code> element and iterating through the returned <code class="highlighter-rouge">FileList</code>.</p>

<h3 id="interactive-demo">Interactive Demo</h3>

<p>You can view an interactive demo on <a href="https://codepen.io/Splode/pen/MVrRqN" target="_blank" rel="noopener">CodePen</a>.</p>
:ET